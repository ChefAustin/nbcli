{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Extensible command-line interface for Netbox using the pynetbox module. Notable Features Search Netbox instance Filter Netbox objects Create and update Netbox objects with YAML file Shell with preloaded pynetbox endpoints Custom Views Custom Commands","title":"Home"},{"location":"#notable-features","text":"Search Netbox instance Filter Netbox objects Create and update Netbox objects with YAML file Shell with preloaded pynetbox endpoints Custom Views Custom Commands","title":"Notable Features"},{"location":"quick-start/","text":"Install $ pip3 install nbcli Configure $ nbcli init Edit pynetbox 'url' and 'token' entries in user_config.yml: ~/.nbcli/user_config.yml At the very minimum, you need to specify a url and token in the user_config.yml file pynetbox : url : http://localhost:8080 token : 0123456789abcdef0123456789abcdef01234567 If you need to disable SSL verification, add (or uncomment) the following to your user_config.yml file. requests : verify : false Models List information on supported Netbox object types $ nbcli models Model Lookup Endpoint tenant_group name tenancy/tenant-groups tenant name tenancy/tenants region name dcim/regions site name dcim/sites location name dcim/locations rack_role name dcim/rack-roles rack name dcim/racks rack_reservation name dcim/rack-reservations manufacturer name dcim/manufacturers device_type model dcim/device-types console_port_template name dcim/console-port-templates console_server_port_template name dcim/console-server-port-templates power_port_template name dcim/power-port-templates power_outlet_template name dcim/power-outlet-templates interface_template name dcim/interface-templates front_port_template name dcim/front-port-templates rear_port_template name dcim/rear-port-templates device_bay_template name dcim/device-bay-templates device_role name dcim/device-roles platform name dcim/platforms device name dcim/devices ... $ nbcli models device Model: device Lookup: name View Name: DcimDevicesView API Endpoint: http://localhost:8080/api/dcim/devices Search Simple search of Netbox objects with searchterm. $ nbcli search compute Device ====== Name Status Tenant Site Rack Role Type IP Address compute-1 Active ENCOM DC 1 1.2 Server A-BL-S 10.0.0.1 compute-2 Active ENCOM DC 1 1.2 Server A-BL-S 10.0.0.2 compute-3 Active ENCOM DC 1 1.2 Server A-BL-S 10.0.0.3 compute-4 Active ENCOM DC 1 1.2 Server A-BL-S 10.0.0.4 Address ======= IP Address Vrf Status Role Tenant Parent Interface DNS Name Description 10.0.0.1/24 - Active - ENCOM - - compute-1.example.com - 10.0.0.2/24 - Active - ENCOM - - compute-2.example.com - 10.0.0.3/24 - Active - ENCOM - - compute-3.example.com - 10.0.0.4/24 - Active - ENCOM - - compute-4.example.com - Filter Filter specified Netbox object type with searchterm, keyword arguments, or auto-resolve arguments $ nbcli filter device web Name Status Tenant Site Rack Role Type IP Address web-1 Active ENCOM DC 1 1.1 Server A-1U-S - web-2 Active ENCOM DC 1 1.1 Server A-1U-S - web-3 Active ENCOM DC 1 1.1 Server A-1U-S - web-proxy-1 Active ENCOM DC 1 1.1 Server A-1U-S - $ nbcli filter device role=server Name Status Tenant Site Rack Role Type IP Address compute-1 Active ENCOM DC 1 1.2 Server A-BL-S - compute-2 Active ENCOM DC 1 1.2 Server A-BL-S - compute-3 Active ENCOM DC 1 1.2 Server A-BL-S - compute-4 Active ENCOM DC 1 1.2 Server A-BL-S - db-1 Active ENCOM DC 1 1.1 Server A-1U-S - db-2 Active ENCOM DC 1 1.1 Server A-1U-S - web-1 Active ENCOM DC 1 1.1 Server A-1U-S - web-2 Active ENCOM DC 1 1.1 Server A-1U-S - web-3 Active ENCOM DC 1 1.1 Server A-1U-S - web-proxy-1 Active ENCOM DC 1 1.1 Server A-1U-S - $ nbcli filter device rack:1.2 Name Status Tenant Site Rack Role Type IP Address chassis-1 Active ENCOM DC 1 1.2 Chassis A-2U-C - compute-1 Active ENCOM DC 1 1.2 Server A-BL-S - compute-2 Active ENCOM DC 1 1.2 Server A-BL-S - compute-3 Active ENCOM DC 1 1.2 Server A-BL-S - compute-4 Active ENCOM DC 1 1.2 Server A-BL-S - Create Create and update objects defined in a yaml file $ nbcli create create-test.yml [INFO](nbcli.create): Creating region with data: {'name': 'USA', 'slug': 'usa'} [INFO](nbcli.create): Creating region with data: {'name': 'New York', 'slug': 'newyork', 'parent': 1} [INFO](nbcli.create): Creating region with data: {'name': 'LA', 'slug': 'la', 'parent': 1} [INFO](nbcli.create): Creating region with data: {'name': 'UK', 'slug': 'uk'} [INFO](nbcli.create): Creating region with data: {'name': 'London', 'slug': 'london', 'parent': 4} [INFO](nbcli.create): Creating site with data: {'name': 'NY DC-1', 'slug': 'ny-dc-1', 'region': 2, 'status': 'active'} [INFO](nbcli.create): Creating site with data: {'name': 'LA DC-1', 'slug': 'la-dc-1', 'region': 3, 'status': 'active'} [INFO](nbcli.create): Creating site with data: {'name': 'London DC-1', 'slug': 'london-dc-1', 'region': 5, 'status': 'active'} [INFO](nbcli.create): Creating manufacturer with data: {'name': 'Cisco', 'slug': 'cisco'} [INFO](nbcli.create): Creating manufacturer with data: {'name': 'Dell', 'slug': 'dell'} [INFO](nbcli.create): Creating manufacturer with data: {'name': 'Hitachi', 'slug': 'hitachi'} [INFO](nbcli.create): Creating manufacturer with data: {'name': 'IBM', 'slug': 'ibm'} [INFO](nbcli.create): Creating device_type with data: {'model': 'R640', 'manufacturer': 3, 'slug': 'r640', 'u_height': 1} Shell Interactive shell with preloaded pynetbox objects. $ nbcli shell Python 3.8.1 | NetBox 2.11 | pynetbox 5.3.1 Root pynetbox API object: Netbox Additional utilities available: lsmodels(), nbprint(), nblogger >>> nbprint(Device.filter('web')) Name Status Tenant Site Rack Role Type IP Address web-1 Active ENCOM NY DC-1 1.1 Server A-1U-S - web-2 Active ENCOM NY DC-1 1.1 Server A-1U-S - web-3 Active ENCOM NY DC-1 1.1 Server A-1U-S - web-proxy-1 Active ENCOM NY DC-1 1.1 Server A-1U-S - >>>","title":"Get Started"},{"location":"quick-start/#install","text":"$ pip3 install nbcli","title":"Install"},{"location":"quick-start/#configure","text":"$ nbcli init Edit pynetbox 'url' and 'token' entries in user_config.yml: ~/.nbcli/user_config.yml At the very minimum, you need to specify a url and token in the user_config.yml file pynetbox : url : http://localhost:8080 token : 0123456789abcdef0123456789abcdef01234567 If you need to disable SSL verification, add (or uncomment) the following to your user_config.yml file. requests : verify : false","title":"Configure"},{"location":"quick-start/#models","text":"List information on supported Netbox object types $ nbcli models Model Lookup Endpoint tenant_group name tenancy/tenant-groups tenant name tenancy/tenants region name dcim/regions site name dcim/sites location name dcim/locations rack_role name dcim/rack-roles rack name dcim/racks rack_reservation name dcim/rack-reservations manufacturer name dcim/manufacturers device_type model dcim/device-types console_port_template name dcim/console-port-templates console_server_port_template name dcim/console-server-port-templates power_port_template name dcim/power-port-templates power_outlet_template name dcim/power-outlet-templates interface_template name dcim/interface-templates front_port_template name dcim/front-port-templates rear_port_template name dcim/rear-port-templates device_bay_template name dcim/device-bay-templates device_role name dcim/device-roles platform name dcim/platforms device name dcim/devices ... $ nbcli models device Model: device Lookup: name View Name: DcimDevicesView API Endpoint: http://localhost:8080/api/dcim/devices","title":"Models"},{"location":"quick-start/#search","text":"Simple search of Netbox objects with searchterm. $ nbcli search compute Device ====== Name Status Tenant Site Rack Role Type IP Address compute-1 Active ENCOM DC 1 1.2 Server A-BL-S 10.0.0.1 compute-2 Active ENCOM DC 1 1.2 Server A-BL-S 10.0.0.2 compute-3 Active ENCOM DC 1 1.2 Server A-BL-S 10.0.0.3 compute-4 Active ENCOM DC 1 1.2 Server A-BL-S 10.0.0.4 Address ======= IP Address Vrf Status Role Tenant Parent Interface DNS Name Description 10.0.0.1/24 - Active - ENCOM - - compute-1.example.com - 10.0.0.2/24 - Active - ENCOM - - compute-2.example.com - 10.0.0.3/24 - Active - ENCOM - - compute-3.example.com - 10.0.0.4/24 - Active - ENCOM - - compute-4.example.com -","title":"Search"},{"location":"quick-start/#filter","text":"Filter specified Netbox object type with searchterm, keyword arguments, or auto-resolve arguments $ nbcli filter device web Name Status Tenant Site Rack Role Type IP Address web-1 Active ENCOM DC 1 1.1 Server A-1U-S - web-2 Active ENCOM DC 1 1.1 Server A-1U-S - web-3 Active ENCOM DC 1 1.1 Server A-1U-S - web-proxy-1 Active ENCOM DC 1 1.1 Server A-1U-S - $ nbcli filter device role=server Name Status Tenant Site Rack Role Type IP Address compute-1 Active ENCOM DC 1 1.2 Server A-BL-S - compute-2 Active ENCOM DC 1 1.2 Server A-BL-S - compute-3 Active ENCOM DC 1 1.2 Server A-BL-S - compute-4 Active ENCOM DC 1 1.2 Server A-BL-S - db-1 Active ENCOM DC 1 1.1 Server A-1U-S - db-2 Active ENCOM DC 1 1.1 Server A-1U-S - web-1 Active ENCOM DC 1 1.1 Server A-1U-S - web-2 Active ENCOM DC 1 1.1 Server A-1U-S - web-3 Active ENCOM DC 1 1.1 Server A-1U-S - web-proxy-1 Active ENCOM DC 1 1.1 Server A-1U-S - $ nbcli filter device rack:1.2 Name Status Tenant Site Rack Role Type IP Address chassis-1 Active ENCOM DC 1 1.2 Chassis A-2U-C - compute-1 Active ENCOM DC 1 1.2 Server A-BL-S - compute-2 Active ENCOM DC 1 1.2 Server A-BL-S - compute-3 Active ENCOM DC 1 1.2 Server A-BL-S - compute-4 Active ENCOM DC 1 1.2 Server A-BL-S -","title":"Filter"},{"location":"quick-start/#create","text":"Create and update objects defined in a yaml file $ nbcli create create-test.yml [INFO](nbcli.create): Creating region with data: {'name': 'USA', 'slug': 'usa'} [INFO](nbcli.create): Creating region with data: {'name': 'New York', 'slug': 'newyork', 'parent': 1} [INFO](nbcli.create): Creating region with data: {'name': 'LA', 'slug': 'la', 'parent': 1} [INFO](nbcli.create): Creating region with data: {'name': 'UK', 'slug': 'uk'} [INFO](nbcli.create): Creating region with data: {'name': 'London', 'slug': 'london', 'parent': 4} [INFO](nbcli.create): Creating site with data: {'name': 'NY DC-1', 'slug': 'ny-dc-1', 'region': 2, 'status': 'active'} [INFO](nbcli.create): Creating site with data: {'name': 'LA DC-1', 'slug': 'la-dc-1', 'region': 3, 'status': 'active'} [INFO](nbcli.create): Creating site with data: {'name': 'London DC-1', 'slug': 'london-dc-1', 'region': 5, 'status': 'active'} [INFO](nbcli.create): Creating manufacturer with data: {'name': 'Cisco', 'slug': 'cisco'} [INFO](nbcli.create): Creating manufacturer with data: {'name': 'Dell', 'slug': 'dell'} [INFO](nbcli.create): Creating manufacturer with data: {'name': 'Hitachi', 'slug': 'hitachi'} [INFO](nbcli.create): Creating manufacturer with data: {'name': 'IBM', 'slug': 'ibm'} [INFO](nbcli.create): Creating device_type with data: {'model': 'R640', 'manufacturer': 3, 'slug': 'r640', 'u_height': 1}","title":"Create"},{"location":"quick-start/#shell","text":"Interactive shell with preloaded pynetbox objects. $ nbcli shell Python 3.8.1 | NetBox 2.11 | pynetbox 5.3.1 Root pynetbox API object: Netbox Additional utilities available: lsmodels(), nbprint(), nblogger >>> nbprint(Device.filter('web')) Name Status Tenant Site Rack Role Type IP Address web-1 Active ENCOM NY DC-1 1.1 Server A-1U-S - web-2 Active ENCOM NY DC-1 1.1 Server A-1U-S - web-3 Active ENCOM NY DC-1 1.1 Server A-1U-S - web-proxy-1 Active ENCOM NY DC-1 1.1 Server A-1U-S - >>>","title":"Shell"},{"location":"test-env/","text":"Setting up a test environment Instructions should work on Mac and Linux. Instructions require python >= 3.6, git, and docker-compose to be installed. Clone nbcli repo git clone https://github.com/ericgeldmacher/nbcli.git && \\ cd nbcli Set up a virtual environment Optional python3 -m venv venv && \\ source venv/bin/activate Install nbcli From Pypi pip3 install nbcli From source pip3 install -e . Set an alternate nbcli directory Optional export NBCLI_DIR = $( pwd ) /.nbcli_testing Initialize nbcli The default values in user_config.yml should work nbcli init Create test server Clone netbox-docker repo and copy needed files into netbox-docker directory git clone https://github.com/netbox-community/netbox-docker.git && \\ cp -r tests/dev-env-files/* netbox-docker/ && \\ cd netbox-docker Create sample objects for netbox-docker Optional python3 create_initializers.py Start test Netbox service and wait for service to be ready service usually take ~1 min to come up wait_for_service.py will time out after 5 min docker-compose pull && \\ docker-compose up -d && \\ python3 wait_for_service.py The test Netbox instance should now be ready for testing! After testing Bring down test Netbox service and deactivate virtual environment. docker-compose down -v && \\ deactivate","title":"Testing"},{"location":"test-env/#setting-up-a-test-environment","text":"Instructions should work on Mac and Linux. Instructions require python >= 3.6, git, and docker-compose to be installed.","title":"Setting up a test environment"},{"location":"test-env/#clone-nbcli-repo","text":"git clone https://github.com/ericgeldmacher/nbcli.git && \\ cd nbcli","title":"Clone nbcli repo"},{"location":"test-env/#set-up-a-virtual-environment","text":"Optional python3 -m venv venv && \\ source venv/bin/activate","title":"Set up a virtual environment"},{"location":"test-env/#install-nbcli","text":"From Pypi pip3 install nbcli From source pip3 install -e .","title":"Install nbcli"},{"location":"test-env/#set-an-alternate-nbcli-directory","text":"Optional export NBCLI_DIR = $( pwd ) /.nbcli_testing","title":"Set an alternate nbcli directory"},{"location":"test-env/#initialize-nbcli","text":"The default values in user_config.yml should work nbcli init","title":"Initialize nbcli"},{"location":"test-env/#create-test-server","text":"","title":"Create test server"},{"location":"test-env/#clone-netbox-docker-repo","text":"and copy needed files into netbox-docker directory git clone https://github.com/netbox-community/netbox-docker.git && \\ cp -r tests/dev-env-files/* netbox-docker/ && \\ cd netbox-docker","title":"Clone netbox-docker repo"},{"location":"test-env/#create-sample-objects-for-netbox-docker","text":"Optional python3 create_initializers.py","title":"Create sample objects for netbox-docker"},{"location":"test-env/#start-test-netbox-service","text":"and wait for service to be ready service usually take ~1 min to come up wait_for_service.py will time out after 5 min docker-compose pull && \\ docker-compose up -d && \\ python3 wait_for_service.py The test Netbox instance should now be ready for testing!","title":"Start test Netbox service"},{"location":"test-env/#after-testing","text":"Bring down test Netbox service and deactivate virtual environment. docker-compose down -v && \\ deactivate","title":"After testing"},{"location":"commands/create/","text":"nbcli create $ nbcli create -h usage: nbcli create [-h] [-v] [-q] [--dr] [-u] file Create and/or Update objects defined in YAML file. positional arguments: file YAML file. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages --dr, --dry-run Dry run. -u, --update-only Do not create object not found with the lookup key schema. Run command. See documentation for YAML file reference and examples. https://nbcli.readthedocs.io/en/release/create.html Usage Examples: - Create/Update objects defined in YAML file $ nbcli create file.yml","title":"create"},{"location":"commands/create/#nbcli-create","text":"$ nbcli create -h usage: nbcli create [-h] [-v] [-q] [--dr] [-u] file Create and/or Update objects defined in YAML file. positional arguments: file YAML file. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages --dr, --dry-run Dry run. -u, --update-only Do not create object not found with the lookup key schema. Run command. See documentation for YAML file reference and examples. https://nbcli.readthedocs.io/en/release/create.html Usage Examples: - Create/Update objects defined in YAML file $ nbcli create file.yml","title":"nbcli create"},{"location":"commands/filter/","text":"nbcli filter $ nbcli filter -h usage: nbcli filter [-h] [-v] [-q] [--view {table,detail,json}] [--view-model VIEW_MODEL] [--cols [COLS [COLS ...]]] [--nh] [-c | -D | --ud [UD [UD ...]]] [--de [DE [DE ...]]] model [args [args ...]] Filter Netbox objects by searchterm and object properties. Optionally update and delete objects returned by the filter. Control output view and listed columns. positional arguments: model NetBox model args Argumnet(s) to filter results. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages --view {table,detail,json} Output view. --view-model VIEW_MODEL View model to use --cols [COLS [COLS ...]] Custom columns for table output. --nh, --no-header Disable header row in results -c, --count Return the count of objects in filter. -D, --delete Delete Object(s) returned by filter [WIP] --ud [UD [UD ...]], --update [UD [UD ...]] Update object(s) returned by filter with given kwargs [WIP] --de [DE [DE ...]], --detail-endpoint [DE [DE ...]] List results from detail endpoint With optional kwargs [WIP] Filter Netbox objects by a searchterm and object properties. Usage Examples: - Filter IP Addresses with searchterm '192.168.1.1': $ nbcli filter address 192.168.1.1 - Filter devices by serial number using keyword arguments: $ nbcli filter device serial=123456 - Filter devices types by manufacturer using auto-resolve arguments: $ nbcli filter device_type manufacturer:ACME - Update tenant on devices returned by filter: $ nbcli filter device name=server1 -ud tenant:tenant2 - Delete IP addresses returned by filter: $ nbcli filter address 192.168.1.1 -D The filter command is designed to emulate the \"list view\" of the Netbox web interface. Results can be refined with a search term, keyword, \"auto-resolve\", and \"compound-resolve\" arguments. Objects returned by the filter can optionally updated or deleted. Basic usage The simplest way to use the filter command is just to pass a search term. Any argument not containing an = or : will be considered a search term argument. nbcli filter device webserver Multiple search terms can be passed to the filter command, but only the first will be used. If your search term needs to contain a space, make sure to wrap it in quotes. nbcli filter device 'web server' Search term arguments can be mixed and matched with any combination of keyword, auto-resolve, and compound-resolve arguments to refine your filter. Keyword arguments Any argument containing an = will be considered a keyword argument in the form of key=value . nbcli filter device serial=123456 Note Keyword arguments are passed to the given REST API endpoint via pynetbox so a familiarity with the Netbox's REST API will help. You can find your Netbox instances API docs at https://your.netbox.url/api/docs You may also want to have a look at Netbox's Documentation on REST API Filtering Multiple keyword arguments can be passed to the filter command and all will be used to refine the filter. nbcli filter address parent=192.168.1.0/24 status=reserved Some keyword arguments can be \"stacked\" where multiple values can be passed for the same key. (This only applies if it is supported by the given parameter of the REST API endpoint.) nbcli filter address status=dhcp status=reserved Auto-resolve arguments [WIP] Any argument containing a : will be considered an auto-resolve argument in the form of object:name . The following will list all devices in rack 1.1 nbcli filter device rack:1.1 These can also be combined to refine the filter. nbcli filter device rack:1.1 device_type:R840 And stacked to include more results nbcli filter device rack:1.1 rack:1.2 nbcli filter device rack:1.1:1.2 Note Behind the sceans, auto-resolve arguments are essantally running another filter command and passing the id values of the results as to the main filter command. So nbcli filter device rack:1.1 is running: nbcli filter rack name=1.1 and then modifying the origenal filter command to be: nbcli filter device rack_id=1 For most object types, the value after the : , is applyed to the key name . You can override this behavior by inserting a keyword argument after the : The following command should return all devices in racks with the status reserved : nbcli filter device rack:status=reserved Compound-resolve arguments [WIP] Any argument containing a :: will be considered a compound-resolve argument in the form of object::object:name . Compound-resolve arguments take the concept of auto-resolve further, by allowing you to apply an auto-resolve to an auto-resolve. This allows you to put more precise constraints on your auto-resolve arguments. For instance you can list interfaces matching the search term 'eth' only on devices in rack 1.1. nbcli filter interface eth device::rack:1.1 Modifying results Results from the filter can be updated or deleted. You will always be prompted to confirm when updating or deleting. Updating Update objects returned by filter. Values can be updated with keyword arguments and/or auto-resolve arguments. $ nbcli filter rack tenant:ENCOM --ud status=reserved 'site:NY DC-1' Update Racks with {'status': 'reserved', 'site': 2}? * 1.1 (1) * 1.2 (2) (yes) to update: yes 1.1 (1) Updated! 1.2 (2) Updated! Deleting Delete objects returned by filter. $ nbcli filter device db -D Delete Devices? * db-1 (5) * db-2 (6) (yes) to delete: yes db-1 (5) Deleted! db-2 (6) Deleted! Detail Endpoint pynetbox DetailEndpoint objects can be access with the --de flag. nbcli filter prefix 192.168.1.0/24 --de available_ips Controlling output The following optional arguments can change how the results of the filter command are displayed. --view {table,detail,json} Output view. --view-model VIEW_MODEL View model to use --cols [COLS [COLS ...]] Custom columns for table output. --nh, --no-header Disable header row in results --view table Displays results in a tabular format. (default) detail Display more detailed info for results. (Poorly implemented, will likely be removed.) json Display results as json string. Output should be similar (but may not be exactly the same) as the contents from the results field when accessing the Netbox API directly. ---view-model Override the default view model for the given object types with one defined by a User Custom View or extention, by specifying it's Class name. nbcli filter device rack:1.1 --view-model MyDevicesView --cols Specify object attributes to display in table view. $ nbcli filter device tenant:ENCOM --cols name rack position device_type name rack position device_type chassis-1 1.2 1 A-2U-C compute-1 1.2 - A-BL-S compute-2 1.2 - A-BL-S compute-3 1.2 - A-BL-S compute-4 1.2 - A-BL-S web-1 1.1 2 A-1U-S web-2 1.1 3 A-1U-S web-3 1.1 4 A-1U-S web-proxy-1 1.1 1 A-1U-S Tip Looking at the json view will give you some insite on what attribues are available for a given object type. $ nbcli filter device compute-1 --view json | jq or $ nbcli filter device compute-1 --view json | python3 -m json.tool If the attribute is an instance of another object type, you can drill into that object to grab it's attributes $ nbcli filter device tenant:ENCOM --cols name rack position parent_device parent_device.position parent_device.device_bay name rack position parent_device parent_device.position parent_device.device_bay chassis-1 1.2 1 - - - compute-1 1.2 - chassis-1 1 1 compute-2 1.2 - chassis-1 1 2 compute-3 1.2 - chassis-1 1 3 compute-4 1.2 - chassis-1 1 4 web-1 1.1 2 - - - web-2 1.1 3 - - - web-3 1.1 4 - - - web-proxy-1 1.1 1 - - - --cols should fail gracefully, so if the attribute does not exist, or is null, or and empty string the value will be displayed as an - $ nbcli filter device tenant:ENCOM --cols name bad_attr bad_attr.child_attr name bad_attr bad_attr.child_attr chassis-1 - - compute-1 - - compute-2 - - compute-3 - - compute-4 - - web-1 - - web-2 - - web-3 - - web-proxy-1 - - --nh, --no-header Allows you to remove the header row in the table view. (Useful for when piping to another shell command.)","title":"filter"},{"location":"commands/filter/#nbcli-filter","text":"$ nbcli filter -h usage: nbcli filter [-h] [-v] [-q] [--view {table,detail,json}] [--view-model VIEW_MODEL] [--cols [COLS [COLS ...]]] [--nh] [-c | -D | --ud [UD [UD ...]]] [--de [DE [DE ...]]] model [args [args ...]] Filter Netbox objects by searchterm and object properties. Optionally update and delete objects returned by the filter. Control output view and listed columns. positional arguments: model NetBox model args Argumnet(s) to filter results. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages --view {table,detail,json} Output view. --view-model VIEW_MODEL View model to use --cols [COLS [COLS ...]] Custom columns for table output. --nh, --no-header Disable header row in results -c, --count Return the count of objects in filter. -D, --delete Delete Object(s) returned by filter [WIP] --ud [UD [UD ...]], --update [UD [UD ...]] Update object(s) returned by filter with given kwargs [WIP] --de [DE [DE ...]], --detail-endpoint [DE [DE ...]] List results from detail endpoint With optional kwargs [WIP] Filter Netbox objects by a searchterm and object properties. Usage Examples: - Filter IP Addresses with searchterm '192.168.1.1': $ nbcli filter address 192.168.1.1 - Filter devices by serial number using keyword arguments: $ nbcli filter device serial=123456 - Filter devices types by manufacturer using auto-resolve arguments: $ nbcli filter device_type manufacturer:ACME - Update tenant on devices returned by filter: $ nbcli filter device name=server1 -ud tenant:tenant2 - Delete IP addresses returned by filter: $ nbcli filter address 192.168.1.1 -D The filter command is designed to emulate the \"list view\" of the Netbox web interface. Results can be refined with a search term, keyword, \"auto-resolve\", and \"compound-resolve\" arguments. Objects returned by the filter can optionally updated or deleted.","title":"nbcli filter"},{"location":"commands/filter/#basic-usage","text":"The simplest way to use the filter command is just to pass a search term. Any argument not containing an = or : will be considered a search term argument. nbcli filter device webserver Multiple search terms can be passed to the filter command, but only the first will be used. If your search term needs to contain a space, make sure to wrap it in quotes. nbcli filter device 'web server' Search term arguments can be mixed and matched with any combination of keyword, auto-resolve, and compound-resolve arguments to refine your filter.","title":"Basic usage"},{"location":"commands/filter/#keyword-arguments","text":"Any argument containing an = will be considered a keyword argument in the form of key=value . nbcli filter device serial=123456 Note Keyword arguments are passed to the given REST API endpoint via pynetbox so a familiarity with the Netbox's REST API will help. You can find your Netbox instances API docs at https://your.netbox.url/api/docs You may also want to have a look at Netbox's Documentation on REST API Filtering Multiple keyword arguments can be passed to the filter command and all will be used to refine the filter. nbcli filter address parent=192.168.1.0/24 status=reserved Some keyword arguments can be \"stacked\" where multiple values can be passed for the same key. (This only applies if it is supported by the given parameter of the REST API endpoint.) nbcli filter address status=dhcp status=reserved","title":"Keyword arguments"},{"location":"commands/filter/#auto-resolve-arguments-wip","text":"Any argument containing a : will be considered an auto-resolve argument in the form of object:name . The following will list all devices in rack 1.1 nbcli filter device rack:1.1 These can also be combined to refine the filter. nbcli filter device rack:1.1 device_type:R840 And stacked to include more results nbcli filter device rack:1.1 rack:1.2 nbcli filter device rack:1.1:1.2 Note Behind the sceans, auto-resolve arguments are essantally running another filter command and passing the id values of the results as to the main filter command. So nbcli filter device rack:1.1 is running: nbcli filter rack name=1.1 and then modifying the origenal filter command to be: nbcli filter device rack_id=1 For most object types, the value after the : , is applyed to the key name . You can override this behavior by inserting a keyword argument after the : The following command should return all devices in racks with the status reserved : nbcli filter device rack:status=reserved","title":"Auto-resolve arguments [WIP]"},{"location":"commands/filter/#compound-resolve-arguments-wip","text":"Any argument containing a :: will be considered a compound-resolve argument in the form of object::object:name . Compound-resolve arguments take the concept of auto-resolve further, by allowing you to apply an auto-resolve to an auto-resolve. This allows you to put more precise constraints on your auto-resolve arguments. For instance you can list interfaces matching the search term 'eth' only on devices in rack 1.1. nbcli filter interface eth device::rack:1.1","title":"Compound-resolve arguments [WIP]"},{"location":"commands/filter/#modifying-results","text":"Results from the filter can be updated or deleted. You will always be prompted to confirm when updating or deleting.","title":"Modifying results"},{"location":"commands/filter/#updating","text":"Update objects returned by filter. Values can be updated with keyword arguments and/or auto-resolve arguments. $ nbcli filter rack tenant:ENCOM --ud status=reserved 'site:NY DC-1' Update Racks with {'status': 'reserved', 'site': 2}? * 1.1 (1) * 1.2 (2) (yes) to update: yes 1.1 (1) Updated! 1.2 (2) Updated!","title":"Updating"},{"location":"commands/filter/#deleting","text":"Delete objects returned by filter. $ nbcli filter device db -D Delete Devices? * db-1 (5) * db-2 (6) (yes) to delete: yes db-1 (5) Deleted! db-2 (6) Deleted!","title":"Deleting"},{"location":"commands/filter/#detail-endpoint","text":"pynetbox DetailEndpoint objects can be access with the --de flag. nbcli filter prefix 192.168.1.0/24 --de available_ips","title":"Detail Endpoint"},{"location":"commands/filter/#controlling-output","text":"The following optional arguments can change how the results of the filter command are displayed. --view {table,detail,json} Output view. --view-model VIEW_MODEL View model to use --cols [COLS [COLS ...]] Custom columns for table output. --nh, --no-header Disable header row in results","title":"Controlling output"},{"location":"commands/filter/#-view","text":"table Displays results in a tabular format. (default) detail Display more detailed info for results. (Poorly implemented, will likely be removed.) json Display results as json string. Output should be similar (but may not be exactly the same) as the contents from the results field when accessing the Netbox API directly.","title":"--view"},{"location":"commands/filter/#-view-model","text":"Override the default view model for the given object types with one defined by a User Custom View or extention, by specifying it's Class name. nbcli filter device rack:1.1 --view-model MyDevicesView","title":"---view-model"},{"location":"commands/filter/#-cols","text":"Specify object attributes to display in table view. $ nbcli filter device tenant:ENCOM --cols name rack position device_type name rack position device_type chassis-1 1.2 1 A-2U-C compute-1 1.2 - A-BL-S compute-2 1.2 - A-BL-S compute-3 1.2 - A-BL-S compute-4 1.2 - A-BL-S web-1 1.1 2 A-1U-S web-2 1.1 3 A-1U-S web-3 1.1 4 A-1U-S web-proxy-1 1.1 1 A-1U-S Tip Looking at the json view will give you some insite on what attribues are available for a given object type. $ nbcli filter device compute-1 --view json | jq or $ nbcli filter device compute-1 --view json | python3 -m json.tool If the attribute is an instance of another object type, you can drill into that object to grab it's attributes $ nbcli filter device tenant:ENCOM --cols name rack position parent_device parent_device.position parent_device.device_bay name rack position parent_device parent_device.position parent_device.device_bay chassis-1 1.2 1 - - - compute-1 1.2 - chassis-1 1 1 compute-2 1.2 - chassis-1 1 2 compute-3 1.2 - chassis-1 1 3 compute-4 1.2 - chassis-1 1 4 web-1 1.1 2 - - - web-2 1.1 3 - - - web-3 1.1 4 - - - web-proxy-1 1.1 1 - - - --cols should fail gracefully, so if the attribute does not exist, or is null, or and empty string the value will be displayed as an - $ nbcli filter device tenant:ENCOM --cols name bad_attr bad_attr.child_attr name bad_attr bad_attr.child_attr chassis-1 - - compute-1 - - compute-2 - - compute-3 - - compute-4 - - web-1 - - web-2 - - web-3 - - web-proxy-1 - -","title":"--cols"},{"location":"commands/filter/#-nh-no-header","text":"Allows you to remove the header row in the table view. (Useful for when piping to another shell command.)","title":"--nh, --no-header"},{"location":"commands/init/","text":"nbcli init $ nbcli init -h usage: nbcli init [-h] [-v] [-q] Initialize nbcli. Default confg directory location $HOME/.nbcli After running edit $HOME/.nbcli/user_config.yml with your credentials. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages Create nbcli config directory and related files. Example Usage: - Initialize nbcli $ nbcli init Config Directory The default nbcli directory is :code: ~/.nbcli/ this can be changed by setting the NBCLI_DIR to a new directory export NBCLI_DIR = /path/to/alt/directory Config File The config file user_config.yml is located in the root of the config directory. Values defined under pynetbox will be directly used to create the pynetbox api instance . at minimum url and token need to be set. pynetbox : url : http://localhost:8080 token : 0123456789abcdef0123456789abcdef01234567 Values defined under requests will be used to create a custom requests Session . If you need to disable SSL verification, add ( or uncomment ) the following to your user_config.yml file. requests : verify : false","title":"init"},{"location":"commands/init/#nbcli-init","text":"$ nbcli init -h usage: nbcli init [-h] [-v] [-q] Initialize nbcli. Default confg directory location $HOME/.nbcli After running edit $HOME/.nbcli/user_config.yml with your credentials. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages Create nbcli config directory and related files. Example Usage: - Initialize nbcli $ nbcli init","title":"nbcli init"},{"location":"commands/init/#config-directory","text":"The default nbcli directory is :code: ~/.nbcli/ this can be changed by setting the NBCLI_DIR to a new directory export NBCLI_DIR = /path/to/alt/directory","title":"Config Directory"},{"location":"commands/init/#config-file","text":"The config file user_config.yml is located in the root of the config directory. Values defined under pynetbox will be directly used to create the pynetbox api instance . at minimum url and token need to be set. pynetbox : url : http://localhost:8080 token : 0123456789abcdef0123456789abcdef01234567 Values defined under requests will be used to create a custom requests Session . If you need to disable SSL verification, add ( or uncomment ) the following to your user_config.yml file. requests : verify : false","title":"Config File"},{"location":"commands/models/","text":"","title":"models"},{"location":"commands/search/","text":"nbcli search $ nbcli search -h usage: nbcli search [-h] [-v] [-q] [obj_type] searchterm Search Netbox objects with the given searchterm. The List of search objects can be modified in: $CONF_DIR/user_config.yml positional arguments: obj_type Object type to search searchterm Search term optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages Run a search of Netbox objects and show a table view of results. Usage Examples: - Search all object types for 'server1': $ nbcli search server1 - Search the interface object type for 'eth 1': $ nbcli search interface 'eth 1' The search command is designed to emulate the main search bar that can be found at the top of the home page of the Netbox web interface. By default it will search through a predefined list of object types and return up to 15 results for each object type. If more then 15 results are found, it will display the filter command to show all the results. If your search term needs to contain a space, make sure to wrap it in quotes. nbcli search 'web server' If you only want to search one object type you can specify if before the search term. nbcli search [obj_type] searchterm . Searching all object types for server1 : nbcli search server1 Searching only devices for server1 : nbcli search device server1 The list of predefined object types that will be searched can be modified by editing the user_config.yml file. nbcli : # search_objects: # - provider # - circuit # - site # - rack # - location # - device_type # - device # - virtual_chassis # - cable # - power_feed # - vrf # - aggregate # - prefix # - address # - vlan # - secret # - tenant # - cluster # - virtual_machine Info nbcli search relies on the q perameter being available for the GET method on the REST API endpoint. Make sure any object added to the search_objects list has the q perameter available for the GET method. Your Netbox instance API docs should be available at https://your.netbox.url/api/docs","title":"search"},{"location":"commands/search/#nbcli-search","text":"$ nbcli search -h usage: nbcli search [-h] [-v] [-q] [obj_type] searchterm Search Netbox objects with the given searchterm. The List of search objects can be modified in: $CONF_DIR/user_config.yml positional arguments: obj_type Object type to search searchterm Search term optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages Run a search of Netbox objects and show a table view of results. Usage Examples: - Search all object types for 'server1': $ nbcli search server1 - Search the interface object type for 'eth 1': $ nbcli search interface 'eth 1' The search command is designed to emulate the main search bar that can be found at the top of the home page of the Netbox web interface. By default it will search through a predefined list of object types and return up to 15 results for each object type. If more then 15 results are found, it will display the filter command to show all the results. If your search term needs to contain a space, make sure to wrap it in quotes. nbcli search 'web server' If you only want to search one object type you can specify if before the search term. nbcli search [obj_type] searchterm . Searching all object types for server1 : nbcli search server1 Searching only devices for server1 : nbcli search device server1 The list of predefined object types that will be searched can be modified by editing the user_config.yml file. nbcli : # search_objects: # - provider # - circuit # - site # - rack # - location # - device_type # - device # - virtual_chassis # - cable # - power_feed # - vrf # - aggregate # - prefix # - address # - vlan # - secret # - tenant # - cluster # - virtual_machine Info nbcli search relies on the q perameter being available for the GET method on the REST API endpoint. Make sure any object added to the search_objects list has the q perameter available for the GET method. Your Netbox instance API docs should be available at https://your.netbox.url/api/docs","title":"nbcli search"},{"location":"commands/shell/","text":"nbcli shell nbcli shell -h usage: nbcli shell [-h] [-v] [-q] [-i] [-s {python,ipython}] [--skip] [script] Launch Interactive Shell with pynetbox objects preloaded. positional arguments: script Script to run optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages -c cmd Program passed in as string -i inspect interactively after running script -s {python,ipython}, --interactive-shell {python,ipython} Specifies interactive shell to use --skip Skip loading models. Run Shell enviornment. Example usage: $ nbcli shell -i myscript.py $ nbcli shell -s python","title":"shell"},{"location":"commands/shell/#nbcli-shell","text":"nbcli shell -h usage: nbcli shell [-h] [-v] [-q] [-i] [-s {python,ipython}] [--skip] [script] Launch Interactive Shell with pynetbox objects preloaded. positional arguments: script Script to run optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages -c cmd Program passed in as string -i inspect interactively after running script -s {python,ipython}, --interactive-shell {python,ipython} Specifies interactive shell to use --skip Skip loading models. Run Shell enviornment. Example usage: $ nbcli shell -i myscript.py $ nbcli shell -s python","title":"nbcli shell"},{"location":"extend/commands/","text":"Custom Commands Example custom command # For a user defined subcommand to be loaded into nbcli # it must be a subclass of BaseSubCommand, found in nbcli.commands.base from nbcli.commands.base import BaseSubCommand class ExampleSubCommand ( BaseSubCommand ): \"\"\"This docstring will automatically be used as the command description. You can override this behavior by setting a description in the parser_kwargs dict. \"\"\" # name is required name = 'hello' # parser_kwargs is optional # It shoud be a dict containing values you with to pass to # the ArgumentParser for the command. # (see https://docs.python.org/3/library/argparse.html) # the value for 'help' will be displayed next to the command # when 'nbcli -h' is run parser_kwargs = dict ( help = 'Say hello' , #description=None, #epilog=None, ) # view_options is optional. # If True it will add --view, --view-model, --cols, and --nh arguments # to the command ArgumentParser and add a pre-configured nbprint() method # available in run() view_options = False def setup ( self ): # Any additional argument that need to be added to the command # ArgumentParser should be added here. # (see https://docs.python.org/3/library/argparse.html) self . parser . add_argument ( '--name' , type = str , default = 'World' , help = 'Who are you saying hello to?' ) def run ( self ): \"\"\"This docstring will automatically be used as the command epilog. You can override this behavior by setting an epilog in the parser_kwargs dict. Usage Examples: - Say hello to the world $ nbcli hello - Say hello to John $ nbcli hello --name John \"\"\" # self.netbox is the pre-configured root pynetbox api object # to be used to interact with the NetBox REST API # (see https://pynetbox.readthedocs.io/en/latest/) # self.args is the parsed arguments for the command # (see https://docs.python.org/3/library/argparse.html) # self.logger is a logger with a pre-set name/loglevel # set from parsed arguments # (see https://docs.python.org/3/library/logging.html) # self.nbprint will be added if view_options is set to True # otherwise it can be imported from nbcli.views.tools print ( 'Hello, {} !' . format ( self . args . name ))","title":"Command"},{"location":"extend/commands/#custom-commands","text":"","title":"Custom Commands"},{"location":"extend/commands/#example-custom-command","text":"# For a user defined subcommand to be loaded into nbcli # it must be a subclass of BaseSubCommand, found in nbcli.commands.base from nbcli.commands.base import BaseSubCommand class ExampleSubCommand ( BaseSubCommand ): \"\"\"This docstring will automatically be used as the command description. You can override this behavior by setting a description in the parser_kwargs dict. \"\"\" # name is required name = 'hello' # parser_kwargs is optional # It shoud be a dict containing values you with to pass to # the ArgumentParser for the command. # (see https://docs.python.org/3/library/argparse.html) # the value for 'help' will be displayed next to the command # when 'nbcli -h' is run parser_kwargs = dict ( help = 'Say hello' , #description=None, #epilog=None, ) # view_options is optional. # If True it will add --view, --view-model, --cols, and --nh arguments # to the command ArgumentParser and add a pre-configured nbprint() method # available in run() view_options = False def setup ( self ): # Any additional argument that need to be added to the command # ArgumentParser should be added here. # (see https://docs.python.org/3/library/argparse.html) self . parser . add_argument ( '--name' , type = str , default = 'World' , help = 'Who are you saying hello to?' ) def run ( self ): \"\"\"This docstring will automatically be used as the command epilog. You can override this behavior by setting an epilog in the parser_kwargs dict. Usage Examples: - Say hello to the world $ nbcli hello - Say hello to John $ nbcli hello --name John \"\"\" # self.netbox is the pre-configured root pynetbox api object # to be used to interact with the NetBox REST API # (see https://pynetbox.readthedocs.io/en/latest/) # self.args is the parsed arguments for the command # (see https://docs.python.org/3/library/argparse.html) # self.logger is a logger with a pre-set name/loglevel # set from parsed arguments # (see https://docs.python.org/3/library/logging.html) # self.nbprint will be added if view_options is set to True # otherwise it can be imported from nbcli.views.tools print ( 'Hello, {} !' . format ( self . args . name ))","title":"Example custom command"},{"location":"extend/views/","text":"Custom Views Example custom view from nbcli.views.tools import BaseView class DcimRUsView ( BaseView ): def table_view ( self ): self . add_col ( 'Name' , self . get_attr ( 'name' )) self . add_col ( 'Device' , self . get_attr ( 'device' )) class MyDevicesView ( BaseView ): def table_view ( self ): self . add_col ( 'Name' , self . get_attr ( 'name' )) self . add_col ( 'Site' , self . get_attr ( 'site' )) self . add_col ( 'Tenant' , self . get_attr ( 'tenant' )) self . add_col ( 'Site' , self . get_attr ( 'site' )) self . add_col ( 'Rack' , self . get_attr ( 'rack' )) manuf = self . get_attr ( 'device_type.manufacturer' ) dtype = self . get_attr ( 'device_type' ) self . add_col ( 'Type' , ' {} {} ' . format ( manuf , dtype ))","title":"Views"},{"location":"extend/views/#custom-views","text":"","title":"Custom Views"},{"location":"extend/views/#example-custom-view","text":"from nbcli.views.tools import BaseView class DcimRUsView ( BaseView ): def table_view ( self ): self . add_col ( 'Name' , self . get_attr ( 'name' )) self . add_col ( 'Device' , self . get_attr ( 'device' )) class MyDevicesView ( BaseView ): def table_view ( self ): self . add_col ( 'Name' , self . get_attr ( 'name' )) self . add_col ( 'Site' , self . get_attr ( 'site' )) self . add_col ( 'Tenant' , self . get_attr ( 'tenant' )) self . add_col ( 'Site' , self . get_attr ( 'site' )) self . add_col ( 'Rack' , self . get_attr ( 'rack' )) manuf = self . get_attr ( 'device_type.manufacturer' ) dtype = self . get_attr ( 'device_type' ) self . add_col ( 'Type' , ' {} {} ' . format ( manuf , dtype ))","title":"Example custom view"},{"location":"reference/create-examples/","text":"","title":"Create Examples"},{"location":"reference/envars/","text":"","title":"Environment Variables"},{"location":"reference/nbprint/","text":"nbprint() >>> from nbcli.views.tools import nbprint >>> devlist = Devices . filter ( 'server' ) >>> nbprint ( devlist ) >>> nbprint ( devlist , disable_header = True ) >>> nbprint ( devlist , view = 'detail' ) >>> nbprint ( devlist , view = 'json' ) >>> nbprint ( devlist , cols = [ 'name' , ... 'device_type.manufacturer' , ... 'device_type.model' ]) >>> nbprint ( devlist , cols = [( 'Name' , 'name' ), ... ( 'Manufacturer' , 'device_type.manufacturer' ), ... ( 'Model' , 'device_type.model' )]) >>> nbprint ( devlist , view_model = 'MyDevicesView' ) >>> from user_views import MyDevicesView >>> nbprint ( devlist , view_model = MyDevicesView ) >>> from nbcli.views.tools import Formatter >>> f = Formatter(devlist) >>> f.string","title":"nbprint()"},{"location":"reference/nbprint/#nbprint","text":">>> from nbcli.views.tools import nbprint >>> devlist = Devices . filter ( 'server' ) >>> nbprint ( devlist ) >>> nbprint ( devlist , disable_header = True ) >>> nbprint ( devlist , view = 'detail' ) >>> nbprint ( devlist , view = 'json' ) >>> nbprint ( devlist , cols = [ 'name' , ... 'device_type.manufacturer' , ... 'device_type.model' ]) >>> nbprint ( devlist , cols = [( 'Name' , 'name' ), ... ( 'Manufacturer' , 'device_type.manufacturer' ), ... ( 'Model' , 'device_type.model' )]) >>> nbprint ( devlist , view_model = 'MyDevicesView' ) >>> from user_views import MyDevicesView >>> nbprint ( devlist , view_model = MyDevicesView ) >>> from nbcli.views.tools import Formatter >>> f = Formatter(devlist) >>> f.string","title":"nbprint()"}]}