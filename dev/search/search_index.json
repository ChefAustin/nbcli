{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Extensible command-line interface for Netbox using the pynetbox module. Notable Features Search Netbox instance Filter Netbox objects Create and update Netbox objects with YAML file Shell with preloaded pynetbox endpoints Custom Views Custom Commands","title":"Home"},{"location":"#notable-features","text":"Search Netbox instance Filter Netbox objects Create and update Netbox objects with YAML file Shell with preloaded pynetbox endpoints Custom Views Custom Commands","title":"Notable Features"},{"location":"quick-start/","text":"Install $ pip install nbcli Configure $ nbcli init Edit pynetbox 'url' and 'token' entries in user_config.yml: ~/.nbcli/user_config.yml At the very minimum, you need to specify a url and token in the user_config.yml file pynetbox : url : http://localhost:8080 token : 0123456789abcdef0123456789abcdef01234567 If you need to disable SSL verification, add (or uncomment) the following to your user_config.yml file. requests : verify : false Search $ nbcli search server dcim.devices ============ ID Name Status Tenant Site Rack Role Type IP Address 1 server01 Active - AMS 1 rack-01 server Other - 2 server02 Active - AMS 2 rack-02 server Other - 3 server03 Active - SING 1 rack-03 server Other - Filter Create Shell","title":"Get Started"},{"location":"quick-start/#install","text":"$ pip install nbcli","title":"Install"},{"location":"quick-start/#configure","text":"$ nbcli init Edit pynetbox 'url' and 'token' entries in user_config.yml: ~/.nbcli/user_config.yml At the very minimum, you need to specify a url and token in the user_config.yml file pynetbox : url : http://localhost:8080 token : 0123456789abcdef0123456789abcdef01234567 If you need to disable SSL verification, add (or uncomment) the following to your user_config.yml file. requests : verify : false","title":"Configure"},{"location":"quick-start/#search","text":"$ nbcli search server dcim.devices ============ ID Name Status Tenant Site Rack Role Type IP Address 1 server01 Active - AMS 1 rack-01 server Other - 2 server02 Active - AMS 2 rack-02 server Other - 3 server03 Active - SING 1 rack-03 server Other -","title":"Search"},{"location":"quick-start/#filter","text":"","title":"Filter"},{"location":"quick-start/#create","text":"","title":"Create"},{"location":"quick-start/#shell","text":"","title":"Shell"},{"location":"test-env/","text":"Setting up a test environment Instructions should work on Mac and Linux. Instructions require python >= 3.6, git, and docker-compose to be installed. Clone nbcli repo git clone https://github.com/ericgeldmacher/nbcli.git && \\ cd nbcli Set up a virtual environment Optional python3 -m venv venv && \\ source venv/bin/activate Install nbcli From Pypi pip3 install nbcli From source pip3 install -e . Set an alternate nbcli directory Optional export NBCLI_DIR = $( pwd ) /.nbcli_testing Initialize nbcli The default values in user_config.yml should work nbcli init Create test server Clone netbox-docker repo and copy needed files into netbox-docker directory git clone https://github.com/netbox-community/netbox-docker.git && \\ cp -r tests/dev-env-files/* netbox-docker/ && \\ cd netbox-docker Create sample objects for netbox-docker Optional python3 create_initializers.py Start test Netbox service and wait for service to be ready service usually take ~1 min to come up wait_for_service.py will time out after 5 min docker-compose pull && \\ docker-compose up -d && \\ python3 wait_for_service.py The test Netbox instance should now be ready for testing! After testing Bring down test Netbox service and deactivate virtual environment. docker-compose down -v && \\ deactivate","title":"Testing"},{"location":"test-env/#setting-up-a-test-environment","text":"Instructions should work on Mac and Linux. Instructions require python >= 3.6, git, and docker-compose to be installed.","title":"Setting up a test environment"},{"location":"test-env/#clone-nbcli-repo","text":"git clone https://github.com/ericgeldmacher/nbcli.git && \\ cd nbcli","title":"Clone nbcli repo"},{"location":"test-env/#set-up-a-virtual-environment","text":"Optional python3 -m venv venv && \\ source venv/bin/activate","title":"Set up a virtual environment"},{"location":"test-env/#install-nbcli","text":"From Pypi pip3 install nbcli From source pip3 install -e .","title":"Install nbcli"},{"location":"test-env/#set-an-alternate-nbcli-directory","text":"Optional export NBCLI_DIR = $( pwd ) /.nbcli_testing","title":"Set an alternate nbcli directory"},{"location":"test-env/#initialize-nbcli","text":"The default values in user_config.yml should work nbcli init","title":"Initialize nbcli"},{"location":"test-env/#create-test-server","text":"","title":"Create test server"},{"location":"test-env/#clone-netbox-docker-repo","text":"and copy needed files into netbox-docker directory git clone https://github.com/netbox-community/netbox-docker.git && \\ cp -r tests/dev-env-files/* netbox-docker/ && \\ cd netbox-docker","title":"Clone netbox-docker repo"},{"location":"test-env/#create-sample-objects-for-netbox-docker","text":"Optional python3 create_initializers.py","title":"Create sample objects for netbox-docker"},{"location":"test-env/#start-test-netbox-service","text":"and wait for service to be ready service usually take ~1 min to come up wait_for_service.py will time out after 5 min docker-compose pull && \\ docker-compose up -d && \\ python3 wait_for_service.py The test Netbox instance should now be ready for testing!","title":"Start test Netbox service"},{"location":"test-env/#after-testing","text":"Bring down test Netbox service and deactivate virtual environment. docker-compose down -v && \\ deactivate","title":"After testing"},{"location":"commands/create/","text":"nbcli create $ nbcli create -h usage: nbcli create [-h] [-v] [-q] [--dr] [-u] file Create and/or Update objects defined in YAML file. positional arguments: file YAML file. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages --dr, --dry-run Dry run. -u, --update-only Do not create object not found with the lookup key schema. Run command. See documentation for YAML file reference and examples. https://nbcli.readthedocs.io/en/release/create.html Usage Examples: - Create/Update objects defined in YAML file $ nbcli create file.yml","title":"create"},{"location":"commands/create/#nbcli-create","text":"$ nbcli create -h usage: nbcli create [-h] [-v] [-q] [--dr] [-u] file Create and/or Update objects defined in YAML file. positional arguments: file YAML file. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages --dr, --dry-run Dry run. -u, --update-only Do not create object not found with the lookup key schema. Run command. See documentation for YAML file reference and examples. https://nbcli.readthedocs.io/en/release/create.html Usage Examples: - Create/Update objects defined in YAML file $ nbcli create file.yml","title":"nbcli create"},{"location":"commands/filter/","text":"nbcli filter $ nbcli filter -h usage: nbcli filter [-h] [-v] [-q] [--view {table,detail,json}] [--view-model VIEW_MODEL] [--cols [COLS [COLS ...]]] [--nh] [-g] [-c | -D | -u UD-ARGS [UD-ARGS ...]] [--de DE-ARGS [DE-ARGS ...]] model [args [args ...]] positional arguments: model NetBox model args Argumnet(s) to filter results. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages --view {table,detail,json} Output view. --view-model VIEW_MODEL View model to use --cols [COLS [COLS ...]] Custome columns for table output. --nh, --no-header Disable header row in results -g, --get Get single result. Raise error if more are returned -c, --count Return the count of objects in filter. -D, --delete Delete Object(s) retrieved by get method -u UD-ARGS [UD-ARGS ...], --update UD-ARGS [UD-ARGS ...] Update object(s) with given kwargs --de DE-ARGS [DE-ARGS ...], --detail-endpoint DE-ARGS [DE-ARGS ...] List results from detail endpoint With optional kwargs","title":"filter"},{"location":"commands/filter/#nbcli-filter","text":"$ nbcli filter -h usage: nbcli filter [-h] [-v] [-q] [--view {table,detail,json}] [--view-model VIEW_MODEL] [--cols [COLS [COLS ...]]] [--nh] [-g] [-c | -D | -u UD-ARGS [UD-ARGS ...]] [--de DE-ARGS [DE-ARGS ...]] model [args [args ...]] positional arguments: model NetBox model args Argumnet(s) to filter results. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages --view {table,detail,json} Output view. --view-model VIEW_MODEL View model to use --cols [COLS [COLS ...]] Custome columns for table output. --nh, --no-header Disable header row in results -g, --get Get single result. Raise error if more are returned -c, --count Return the count of objects in filter. -D, --delete Delete Object(s) retrieved by get method -u UD-ARGS [UD-ARGS ...], --update UD-ARGS [UD-ARGS ...] Update object(s) with given kwargs --de DE-ARGS [DE-ARGS ...], --detail-endpoint DE-ARGS [DE-ARGS ...] List results from detail endpoint With optional kwargs","title":"nbcli filter"},{"location":"commands/init/","text":"nbcli init $ nbcli init -h usage: nbcli init [-h] [-v] [-q] Initialize nbcli. Default confg directory location $HOME/.nbcli After running edit $HOME/.nbcli/user_config.yml with your credentials. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages Create nbcli config directory and related files. Example Usage: - Initialize nbcli $ nbcli init Config Directory The default nbcli directory is :code: ~/.nbcli/ this can be changed by setting the NBCLI_DIR to a new directory export NBCLI_DIR = /path/to/alt/directory Config File The config file user_config.yml is located in the root of the config directory. Values defined under pynetbox will be directly used to create the pynetbox api instance . at minimum url and token need to be set. pynetbox : url : http://localhost:8080 token : 0123456789abcdef0123456789abcdef01234567 Values defined under requests will be used to create a custom requests Session . If you need to disable SSL verification, add ( or uncomment ) the following to your user_config.yml file. requests : verify : false","title":"init"},{"location":"commands/init/#nbcli-init","text":"$ nbcli init -h usage: nbcli init [-h] [-v] [-q] Initialize nbcli. Default confg directory location $HOME/.nbcli After running edit $HOME/.nbcli/user_config.yml with your credentials. optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages Create nbcli config directory and related files. Example Usage: - Initialize nbcli $ nbcli init","title":"nbcli init"},{"location":"commands/init/#config-directory","text":"The default nbcli directory is :code: ~/.nbcli/ this can be changed by setting the NBCLI_DIR to a new directory export NBCLI_DIR = /path/to/alt/directory","title":"Config Directory"},{"location":"commands/init/#config-file","text":"The config file user_config.yml is located in the root of the config directory. Values defined under pynetbox will be directly used to create the pynetbox api instance . at minimum url and token need to be set. pynetbox : url : http://localhost:8080 token : 0123456789abcdef0123456789abcdef01234567 Values defined under requests will be used to create a custom requests Session . If you need to disable SSL verification, add ( or uncomment ) the following to your user_config.yml file. requests : verify : false","title":"Config File"},{"location":"commands/search/","text":"nbcli search $ nbcli search -h usage: nbcli search [-h] [-v] [-q] [app_model] searchterm Search Netbox objects with the given searchterm. The List of search models can be modified in: $HOME/$CONF_DIR/config.yml positional arguments: app_model Model location to search (app.model) searchterm Search term optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages Run a search of Netbox objects and show a table view of results. Usage Examples: - Search all search modelss for 'server1': $ nbcli search server1 - Search the dcim.interfaces model for 'eth 1': $ nbcli search dcim.interfaces 'eth 1'","title":"search"},{"location":"commands/search/#nbcli-search","text":"$ nbcli search -h usage: nbcli search [-h] [-v] [-q] [app_model] searchterm Search Netbox objects with the given searchterm. The List of search models can be modified in: $HOME/$CONF_DIR/config.yml positional arguments: app_model Model location to search (app.model) searchterm Search term optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages Run a search of Netbox objects and show a table view of results. Usage Examples: - Search all search modelss for 'server1': $ nbcli search server1 - Search the dcim.interfaces model for 'eth 1': $ nbcli search dcim.interfaces 'eth 1'","title":"nbcli search"},{"location":"commands/shell/","text":"nbcli shell nbcli shell -h usage: nbcli shell [-h] [-v] [-q] [-i] [-s {python,ipython}] [--skip] [script] Launch Interactive Shell with pynetbox objects preloaded. positional arguments: script Script to run optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages -c cmd Program passed in as string -i inspect interactively after running script -s {python,ipython}, --interactive-shell {python,ipython} Specifies interactive shell to use --skip Skip loading models. Run Shell enviornment. Example usage: $ nbcli shell -i myscript.py $ nbcli shell -s python","title":"shell"},{"location":"commands/shell/#nbcli-shell","text":"nbcli shell -h usage: nbcli shell [-h] [-v] [-q] [-i] [-s {python,ipython}] [--skip] [script] Launch Interactive Shell with pynetbox objects preloaded. positional arguments: script Script to run optional arguments: -h, --help show this help message and exit -v, --verbose Show more logging messages -q, --quiet Show fewer logging messages -c cmd Program passed in as string -i inspect interactively after running script -s {python,ipython}, --interactive-shell {python,ipython} Specifies interactive shell to use --skip Skip loading models. Run Shell enviornment. Example usage: $ nbcli shell -i myscript.py $ nbcli shell -s python","title":"nbcli shell"},{"location":"extend/commands/","text":"Custom Commands Example custom command # For a user defined subcommand to be loaded into nbcli # it must be a subclass of BaseSubCommand, found in nbcli.commands.base from nbcli.commands.base import BaseSubCommand class ExampleSubCommand ( BaseSubCommand ): \"\"\"This docstring will automatically be used as the command description. You can override this behavior by setting a description in the parser_kwargs dict. \"\"\" # name is required name = 'hello' # parser_kwargs is optional # It shoud be a dict containing values you with to pass to # the ArgumentParser for the command. # (see https://docs.python.org/3/library/argparse.html) # the value for 'help' will be displayed next to the command # when 'nbcli -h' is run parser_kwargs = dict ( help = 'Say hello' , #description=None, #epilog=None, ) # view_options is optional. # If True it will add --view, --view-model, --cols, and --nh arguments # to the command ArgumentParser and add a pre-configured nbprint() method # available in run() view_options = False def setup ( self ): # Any additional argument that need to be added to the command # ArgumentParser should be added here. # (see https://docs.python.org/3/library/argparse.html) self . parser . add_argument ( '--name' , type = str , default = 'World' , help = 'Who are you saying hello to?' ) def run ( self ): \"\"\"This docstring will automatically be used as the command epilog. You can override this behavior by setting an epilog in the parser_kwargs dict. Usage Examples: - Say hello to the world $ nbcli hello - Say hello to John $ nbcli hello --name John \"\"\" # self.netbox is the pre-configured root pynetbox api object # to be used to interact with the NetBox REST API # (see https://pynetbox.readthedocs.io/en/latest/) # self.args is the parsed arguments for the command # (see https://docs.python.org/3/library/argparse.html) # self.logger is a logger with a pre-set name/loglevel # set from parsed arguments # (see https://docs.python.org/3/library/logging.html) # self.nbprint will be added if view_options is set to True # otherwise it can be imported from nbcli.views.tools print ( 'Hello, {} !' . format ( self . args . name ))","title":"Command"},{"location":"extend/commands/#custom-commands","text":"","title":"Custom Commands"},{"location":"extend/commands/#example-custom-command","text":"# For a user defined subcommand to be loaded into nbcli # it must be a subclass of BaseSubCommand, found in nbcli.commands.base from nbcli.commands.base import BaseSubCommand class ExampleSubCommand ( BaseSubCommand ): \"\"\"This docstring will automatically be used as the command description. You can override this behavior by setting a description in the parser_kwargs dict. \"\"\" # name is required name = 'hello' # parser_kwargs is optional # It shoud be a dict containing values you with to pass to # the ArgumentParser for the command. # (see https://docs.python.org/3/library/argparse.html) # the value for 'help' will be displayed next to the command # when 'nbcli -h' is run parser_kwargs = dict ( help = 'Say hello' , #description=None, #epilog=None, ) # view_options is optional. # If True it will add --view, --view-model, --cols, and --nh arguments # to the command ArgumentParser and add a pre-configured nbprint() method # available in run() view_options = False def setup ( self ): # Any additional argument that need to be added to the command # ArgumentParser should be added here. # (see https://docs.python.org/3/library/argparse.html) self . parser . add_argument ( '--name' , type = str , default = 'World' , help = 'Who are you saying hello to?' ) def run ( self ): \"\"\"This docstring will automatically be used as the command epilog. You can override this behavior by setting an epilog in the parser_kwargs dict. Usage Examples: - Say hello to the world $ nbcli hello - Say hello to John $ nbcli hello --name John \"\"\" # self.netbox is the pre-configured root pynetbox api object # to be used to interact with the NetBox REST API # (see https://pynetbox.readthedocs.io/en/latest/) # self.args is the parsed arguments for the command # (see https://docs.python.org/3/library/argparse.html) # self.logger is a logger with a pre-set name/loglevel # set from parsed arguments # (see https://docs.python.org/3/library/logging.html) # self.nbprint will be added if view_options is set to True # otherwise it can be imported from nbcli.views.tools print ( 'Hello, {} !' . format ( self . args . name ))","title":"Example custom command"},{"location":"extend/views/","text":"Custom Views Example custom view from nbcli.views.tools import BaseView class DcimRUsView ( BaseView ): def table_view ( self ): self . add_col ( 'Name' , self . get_attr ( 'name' )) self . add_col ( 'Device' , self . get_attr ( 'device' )) class MyDevicesView ( BaseView ): def table_view ( self ): self . add_col ( 'Name' , self . get_attr ( 'name' )) self . add_col ( 'Site' , self . get_attr ( 'site' )) self . add_col ( 'Tenant' , self . get_attr ( 'tenant' )) self . add_col ( 'Site' , self . get_attr ( 'site' )) self . add_col ( 'Rack' , self . get_attr ( 'rack' )) manuf = self . get_attr ( 'device_type.manufacturer' ) dtype = self . get_attr ( 'device_type' ) self . add_col ( 'Type' , ' {} {} ' . format ( manuf , dtype ))","title":"Views"},{"location":"extend/views/#custom-views","text":"","title":"Custom Views"},{"location":"extend/views/#example-custom-view","text":"from nbcli.views.tools import BaseView class DcimRUsView ( BaseView ): def table_view ( self ): self . add_col ( 'Name' , self . get_attr ( 'name' )) self . add_col ( 'Device' , self . get_attr ( 'device' )) class MyDevicesView ( BaseView ): def table_view ( self ): self . add_col ( 'Name' , self . get_attr ( 'name' )) self . add_col ( 'Site' , self . get_attr ( 'site' )) self . add_col ( 'Tenant' , self . get_attr ( 'tenant' )) self . add_col ( 'Site' , self . get_attr ( 'site' )) self . add_col ( 'Rack' , self . get_attr ( 'rack' )) manuf = self . get_attr ( 'device_type.manufacturer' ) dtype = self . get_attr ( 'device_type' ) self . add_col ( 'Type' , ' {} {} ' . format ( manuf , dtype ))","title":"Example custom view"},{"location":"reference/create-examples/","text":"","title":"Create Examples"},{"location":"reference/envars/","text":"","title":"Environment Variables"},{"location":"reference/nbprint/","text":"nbprint() >>> from nbcli.views.tools import nbprint >>> devlist = Devices . filter ( 'server' ) >>> nbprint ( devlist ) >>> nbprint ( devlist , disable_header = True ) >>> nbprint ( devlist , view = 'detail' ) >>> nbprint ( devlist , view = 'json' ) >>> nbprint ( devlist , cols = [ 'name' , ... 'device_type.manufacturer' , ... 'device_type.model' ]) >>> nbprint ( devlist , cols = [( 'Name' , 'name' ), ... ( 'Manufacturer' , 'device_type.manufacturer' ), ... ( 'Model' , 'device_type.model' )]) >>> nbprint ( devlist , view_model = 'MyDevicesView' ) >>> from user_views import MyDevicesView >>> nbprint ( devlist , view_model = MyDevicesView ) >>> from nbcli.views.tools import Formatter >>> f = Formatter(devlist) >>> f.string","title":"nbprint()"},{"location":"reference/nbprint/#nbprint","text":">>> from nbcli.views.tools import nbprint >>> devlist = Devices . filter ( 'server' ) >>> nbprint ( devlist ) >>> nbprint ( devlist , disable_header = True ) >>> nbprint ( devlist , view = 'detail' ) >>> nbprint ( devlist , view = 'json' ) >>> nbprint ( devlist , cols = [ 'name' , ... 'device_type.manufacturer' , ... 'device_type.model' ]) >>> nbprint ( devlist , cols = [( 'Name' , 'name' ), ... ( 'Manufacturer' , 'device_type.manufacturer' ), ... ( 'Model' , 'device_type.model' )]) >>> nbprint ( devlist , view_model = 'MyDevicesView' ) >>> from user_views import MyDevicesView >>> nbprint ( devlist , view_model = MyDevicesView ) >>> from nbcli.views.tools import Formatter >>> f = Formatter(devlist) >>> f.string","title":"nbprint()"}]}